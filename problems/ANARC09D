<head>
<meta charset="utf-8">
</head>
<style type="text/css">
	a { text-decoration: none }
	p { line-height: 1.8; }
	th {text-align: left; }
</style>
<font face="verdana"><p>
<a href="http://www.spoj.com/problems/ANARC09D"target="_blank">View problem on Spoj</a><br>
<table width="100%" style="margin-top:10px">
<tr>
	<td>
		<h2>SPOJ Problem Set (classical)</h2>
				<h1>5452. Hop Do not Walk</h1>
		<h2>Problem code: ANARC09D</h2>
	</td>
	</tr>
</table>

<p align="justify">
<p>Kermit The Frog is a classic video game with a simple control and objective but requires a good deal of thinking. You control an animated frog that can walk and hop, in both forward and backward directions. The frog stands in a space between an otherwise a contiguous line of tiles. Each tile is painted black on one side, and white on the other. The frog can walk (forward, or backward) over an adjacent tile (in front or behind him.) When the frog walks over a tile, the tile slides to the space where the frog was standing. For example, in the adjacent figure, the frog has two tiles behind him, and three in front. We&rsquo;ll use the notation BWFBBW to refer to this situation where F refers to the space (where the frog is standing,) B is a tile with its black face showing, while W is a tile with its white face showing. The forward direction is from left to right. If the frog were to walk forward, the resulting situation is BWBFBW. Similar behavior when the frog walks backward, the tile behind the frog slides to where the frog was standing. The frog can also hop over the tiles. The frog can hop over an adjacent tile landing on the tile next to it. For example, if the frog was to hop backward, it would land on the first (left-most) tile, and the tile would jump to the space where the frog was standing. In addition, the tile would flip sides. For example, hopping backward in the figure would result in the situation: FWWBBW. We challenge you to write a program to determine the minimum number of moves (walks or hops) to transform one tile configuration into another.</p>
<p><img src="http://img209.imageshack.us/img209/7104/forg.jpg" alt="" /></p>
<h3>Input</h3>
<p>Your program will be tested on one or more test cases. Each test case is specified on a single line that specifies string S representing the initial tile arrangement. S is a non-empty string and no longer than 100 characters and is made of the letters &rsquo;B&rsquo;, &rsquo;W&rsquo;, and exactly one &rsquo;F&rsquo;. The last line of the input file has one or more &rsquo;-&rsquo; (minus) characters.</p>
<h3>Output</h3>
<p>For each test case, print the following line:<br />k. M<br />Where k is the test case number (starting at one,) and M is the minimum number of moves needed<br />to transform the given arrangement to an arrangement that has no white tile(s) between any of<br />its black tiles . The frog can be anywhere. M is -1 if the problem cannot be solved in less than 10<br />moves.</p>
<h3>Example</h3>
<pre><strong>Input:</strong><br />WWBBFBW<br />WWFBWBW<br />FWBBWBW<br />---<br /><br /><strong>Output:</strong><br />1. 0<br />2. 1<br />3. 2</pre>

<hr>
<table border=0 cellspacing=0 cellpadding=0 align=left style="margin-bottom:10px" class="probleminfo">
<tr><td>Added by:</td><td><a href="/SPOJ/users/mohammadkotb">Mohammad Kotb</a></td></tr>
<tr><td>Date:</td><td>2009-11-28</td></tr>
<tr><td>Time limit:</td><td>2.314s
</td></tr>
<tr><td>Source limit:</td><td>50000B</td></tr>
<tr><td>Memory limit:</td><td>1536MB</td></tr>
	<tr>
		<td>Cluster:</td>
		<td>
							<a href="/clusters/" target="_blank">Cube (Intel Pentium G860 3GHz)</a>
					
		</td>
	</tr>
<tr><td>Languages:</td><td>All except: NODEJS PERL 6 SCM chicken VB.net </td></tr>
<tr><td>Resource:</td><td>http://www.icpc-anarc.org</td></tr>	
</table>
