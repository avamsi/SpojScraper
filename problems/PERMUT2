<head>
<meta charset="utf-8">
</head>
<style type="text/css">
	a { text-decoration: none }
	p { line-height: 1.8; }
	th {text-align: left; }
</style>
<font face="verdana"><p>
<a href="http://www.spoj.com/problems/PERMUT2"target="_blank">View problem on Spoj</a><br>
<table width="100%" style="margin-top:10px">
<tr>
	<td>
		<h2>SPOJ Problem Set (classical)</h2>
				<h1>379. Ambiguous Permutations</h1>
		<h2>Problem code: PERMUT2</h2>
	</td>
	</tr>
</table>

<p align="justify">
<p>
Some programming contest problems are really tricky: not only do they
require a different output format from what you might have expected, but
also the sample output does not show the difference. For an example,
let us look at permutations.<br>
A <b>permutation</b> of the integers <i>1</i> to <i>n</i> is an
ordering of
these integers. So the natural way to represent a permutation is
to list the integers in this order. With <i>n = 5</i>, a
permutation might look like 2, 3, 4, 5, 1. <br>
However, there is another possibility of representing a permutation:
You create a list of numbers where the <i>i</i>-th number is the
position of the integer <i>i</i> in the permutation. 
Let us call this second
possibility an <b>inverse permutation</b>. The inverse permutation
for the sequence above is 5, 1, 2, 3, 4.
<br>
An <b>ambiguous permutation</b> is a permutation which cannot be
distinguished from its inverse permutation. The permutation 1, 4, 3, 2
for example is ambiguous, because its inverse permutation is the same.
To get rid of such annoying sample test cases, you have to write a
program which detects if a given permutation is ambiguous or not.
</p>
<h3>Input Specification</h3>
<p>The input contains several test cases.<br>
The first line of each test case contains an integer <i>n</i>
(<i>1 &#8804; n &#8804; 100000</i>).
Then a permutation of the integers <i>1</i> to <i>n</i> follows
in the next line. There is exactly one space character
between consecutive integers.
You can assume that every integer between <i>1</i> and <i>n</i>
appears exactly once in the permutation.
<br>
The last test case is followed by a zero.
</p>
<h3>Output Specification</h3>
<p>For each test case output whether the permutation is ambiguous or not.
Adhere to the format shown in the sample output.
</p>
<h3>Sample Input</h3>
<pre>4
1 4 3 2
5
2 3 4 5 1
1
1
0
</pre>
<h3>Sample Output</h3>
<pre>ambiguous
not ambiguous
ambiguous
</pre>

<hr>
<table border=0 cellspacing=0 cellpadding=0 align=left style="margin-bottom:10px" class="probleminfo">
<tr><td>Added by:</td><td><a href="/SPOJ/users/ak15">Adrian Kuegel</a></td></tr>
<tr><td>Date:</td><td>2005-06-24</td></tr>
<tr><td>Time limit:</td><td>10s
</td></tr>
<tr><td>Source limit:</td><td>50000B</td></tr>
<tr><td>Memory limit:</td><td>1536MB</td></tr>
	<tr>
		<td>Cluster:</td>
		<td>
							<a href="/clusters/" target="_blank">Cube (Intel Pentium G860 3GHz)</a>
					
		</td>
	</tr>
<tr><td>Languages:</td><td>All except: NODEJS PERL 6 SCM chicken VB.net </td></tr>
<tr><td>Resource:</td><td>own problem, used in University of Ulm Local Contest 2005</td></tr>	
</table>
